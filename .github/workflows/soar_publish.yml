name: Splunk SOAR publish

on:
  push:
    branches:
      - qua
      - main

jobs:
  soar_publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python requirements
        run: pip install -r utils/requirements.txt

      - name: Package and Publish Objects to Splunk SOAR
        env:
          SOAR_QUA_DEST_API_URL: ${{ vars.SOAR_QUA_DEST_API_URL }}
          SOAR_QUA_DEST_API_TOKEN: ${{ secrets.SOAR_QUA_DEST_API_TOKEN }}
          SOAR_QUA_DEST_SCM_NAME: ${{ vars.SOAR_QUA_DEST_SCM_NAME }}
          SOAR_PROD_DEST_API_URL: ${{ vars.SOAR_PROD_DEST_API_URL }}
          SOAR_PROD_DEST_API_TOKEN: ${{ secrets.SOAR_PROD_DEST_API_TOKEN }}
          SOAR_PROD_DEST_SCM_NAME: ${{ vars.SOAR_PROD_DEST_SCM_NAME }}
        run: |
          echo "Branch: ${{ github.ref }}"

          # Set API parameters based on the branch
          if [[ "${{ github.ref }}" == "refs/heads/qua" ]]; then
              DEST_API_URL=$SOAR_QUA_DEST_API_URL
              DEST_API_TOKEN=$SOAR_QUA_DEST_API_TOKEN
              DEST_SCM_NAME=$SOAR_QUA_DEST_SCM_NAME
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              DEST_API_URL=$SOAR_PROD_DEST_API_URL
              DEST_API_TOKEN=$SOAR_PROD_DEST_API_TOKEN
              DEST_SCM_NAME=$SOAR_PROD_DEST_SCM_NAME
          else
              echo "Invalid branch. Exiting."
              exit 1
          fi

          # Find all JSON files and create tarballs with their corresponding Python files
          find . -name '*.json' | while read -r json_file; do
              py_file="${json_file%.json}.py"
              if [[ -f "$py_file" ]]; then
                  tarball_path="/tmp/$(basename "${json_file%.json}").tgz"
                  tar -czvf "$tarball_path" "$json_file" "$py_file"
                  
                  # Check the contents of the tarball
                  echo "Contents of $tarball_path:"
                  tar -tzf "$tarball_path"

                  # Determine object type, assuming default is playbook unless in a specific directory
                  object_type="playbook"
                  if [[ "$json_file" == *"/custom_functions/"* ]]; then
                      object_type="custom_function"
                  fi

                  echo "Uploading $tarball_path as $object_type"
                  # Call the Python script to import the tarball
                  python3 utils/soar_publish.py --input_file "$tarball_path" --object_type "$object_type" --dest_target="$DEST_API_URL" --dest_token="$DEST_API_TOKEN" --dest_scm_name="$DEST_SCM_NAME"
              else
                  echo "No matching Python file for $json_file, skipping..."
              fi
          done
