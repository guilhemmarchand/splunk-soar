{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Splunk",
    "coa": {
        "data": {
            "description": "This playbook is designed to operate automatically on the label splunk_events which corresponds to events send by Splunk ES from Notable Events.",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_5_to_port_9",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_1",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_10",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_10_to_port_5",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_10_to_port_11",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_11_to_port_1",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "ac03999391c48dbc01fe0d7c4e50c4598452a46f",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 190,
                    "y": -1.2789769243681803e-13
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 190,
                    "y": 656
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "Check for UC requirements",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.soar_playbook",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "If playbook field",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "requirements not met",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "check_for_uc_requirements",
                        "id": "10",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "decision",
                    "x": 250,
                    "y": 148
                },
                "11": {
                    "data": {
                        "advanced": {
                            "customName": "Add comment AF invalid",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "add_comment_af_invalid",
                        "id": "11",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "comment": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "comment",
                                        "name": "comment",
                                        "placeholder": "Enter a comment",
                                        "renderType": "datapath",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add comment",
                                "name": "comment"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "comment": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "trace"
                                ],
                                "comment": "Invalid: the soar_playbook fields is missing from the artifact"
                            }
                        }
                    },
                    "errors": {},
                    "id": "11",
                    "type": "utility",
                    "x": 340,
                    "y": 508
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Filter for UC ref",
                            "customNameId": 0,
                            "description": "Filers for artifacts containing the custom field splunk_use_care_ref provided by enrichment from Splunk",
                            "join": [],
                            "note": "Green: the artifact has a field value for splunk_use_case_ref"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.soar_playbook",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Filter for playbook field",
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_for_uc_ref",
                        "id": "5",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "filter",
                    "x": 60,
                    "y": 328
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "Call UC playbook",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "call_uc_playbook",
                        "id": "9",
                        "inputParameters": [
                            "filtered-data:filter_for_uc_ref:condition_1:artifact:*.cef.soar_playbook"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(\"Calling playbook={0}\".format(filtered_artifact_0__cef_soar_playbook[0]))\n    playbook_run_id = phantom.playbook(filtered_artifact_0__cef_soar_playbook[0], container=container)\n\n",
                    "x": 0,
                    "y": 508
                }
            },
            "notes": "Relies on the enriched custom field splunk_use_case_ref"
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2023-09-20T08:49:12.803697+00:00",
    "draft_mode": false,
    "labels": [
        "splunk_events"
    ],
    "tags": []
}